'use client'

import { useState } from 'react'

interface QuickProductFormProps {
  onSubmit: (productData: any) => void
  loading: boolean
}

const PRODUCT_TEMPLATES = {
  tshirt: {
    category: 'tshirts',
    material: '–•–ª–æ–ø–æ–∫ 100%',
    colors: '–ë–µ–ª—ã–π, –ß–µ—Ä–Ω—ã–π, –°–µ—Ä—ã–π, –°–∏–Ω–∏–π',
    sizes: 'XS, S, M, L, XL, XXL',
    description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –∏–∑ 100% —Ö–ª–æ–ø–∫–∞. –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–æ—Å–∞–¥–∫–∞, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—à–∏–≤–∞.'
  },
  hoodie: {
    category: 'hoodies',
    material: '–•–ª–æ–ø–æ–∫ 80%, –ü–æ–ª–∏—ç—Å—Ç–µ—Ä 20%',
    colors: '–ß–µ—Ä–Ω—ã–π, –°–µ—Ä—ã–π, –ë–µ–ª—ã–π, –ë–æ—Ä–¥–æ–≤—ã–π',
    sizes: 'S, M, L, XL, XXL',
    description: '–¢–µ–ø–ª–æ–µ —Ö—É–¥–∏ —Å –∫–∞–ø—é—à–æ–Ω–æ–º. –ú—è–≥–∫–∏–π —Ñ–ª–∏—Å–æ–≤—ã–π –ø–æ–¥–∫–ª–∞–¥, —É–¥–æ–±–Ω—ã–π –∫—Ä–æ–π.'
  },
  cap: {
    category: 'caps',
    material: '–•–ª–æ–ø–æ–∫ 100%',
    colors: '–ß–µ—Ä–Ω—ã–π, –ë–µ–ª—ã–π, –°–∏–Ω–∏–π, –ö—Ä–∞—Å–Ω—ã–π',
    sizes: 'One Size',
    description: '–°—Ç–∏–ª—å–Ω–∞—è –∫–µ–ø–∫–∞-—Å–Ω—ç–ø–±—ç–∫. –†–µ–≥—É–ª–∏—Ä—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤—ã—à–∏–≤–∫–∞.'
  }
}

export default function QuickProductForm({ onSubmit, loading }: QuickProductFormProps) {
  const [formData, setFormData] = useState({
    name: '',
    price: '',
    category: 'tshirts',
    description: '',
    material: '–•–ª–æ–ø–æ–∫ 100%',
    colors: '',
    sizes: '',
    template: ''
  })

  const handleTemplateSelect = (templateKey: string) => {
    const template = PRODUCT_TEMPLATES[templateKey as keyof typeof PRODUCT_TEMPLATES]
    if (template) {
      setFormData(prev => ({
        ...prev,
        ...template,
        template: templateKey
      }))
    }
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    const productData = {
      name: formData.name,
      price: Number(formData.price),
      category: formData.category,
      description: formData.description,
      material: formData.material,
      colors: formData.colors.split(',').map(c => c.trim()).filter(c => c),
      sizes: formData.sizes.split(',').map(s => s.trim()).filter(s => s),
      image: '/assets/catalog/placeholder.svg'
    }
    
    onSubmit(productData)
  }

  return (
    <div className="bg-gray-800 p-6 rounded-lg border border-gray-700">
      <h3 className="text-xl font-semibold text-white mb-4">‚ö° –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</h3>
      
      {/* –®–∞–±–ª–æ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ */}
      <div className="mb-6">
        <label className="block text-gray-300 text-sm font-bold mb-2">
          –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        </label>
        <div className="grid grid-cols-3 gap-2">
          <button
            type="button"
            onClick={() => handleTemplateSelect('tshirt')}
            className={`p-3 rounded-lg border transition-colors ${
              formData.template === 'tshirt' 
                ? 'border-primary bg-yellow-400 bg-opacity-20 text-primary' 
                : 'border-gray-600 text-gray-300 hover:border-gray-500'
            }`}
          >
            üëï –§—É—Ç–±–æ–ª–∫–∞
          </button>
          <button
            type="button"
            onClick={() => handleTemplateSelect('hoodie')}
            className={`p-3 rounded-lg border transition-colors ${
              formData.template === 'hoodie' 
                ? 'border-primary bg-yellow-400 bg-opacity-20 text-primary' 
                : 'border-gray-600 text-gray-300 hover:border-gray-500'
            }`}
          >
            üß• –•—É–¥–∏
          </button>
          <button
            type="button"
            onClick={() => handleTemplateSelect('cap')}
            className={`p-3 rounded-lg border transition-colors ${
              formData.template === 'cap' 
                ? 'border-primary bg-yellow-400 bg-opacity-20 text-primary' 
                : 'border-gray-600 text-gray-300 hover:border-gray-500'
            }`}
          >
            üß¢ –ö–µ–ø–∫–∞
          </button>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è */}
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-gray-300 text-sm font-bold mb-2">
              –ù–∞–∑–≤–∞–Ω–∏–µ*
            </label>
            <input
              type="text"
              required
              value={formData.name}
              onChange={(e) => setFormData({...formData, name: e.target.value})}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
            />
          </div>
          
          <div>
            <label className="block text-gray-300 text-sm font-bold mb-2">
              –¶–µ–Ω–∞ (‚ÇΩ)*
            </label>
            <input
              type="number"
              required
              min="0"
              value={formData.price}
              onChange={(e) => setFormData({...formData, price: e.target.value})}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
              placeholder="450"
            />
          </div>
        </div>

        {/* –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è */}
        <div>
          <label className="block text-gray-300 text-sm font-bold mb-2">
            –û–ø–∏—Å–∞–Ω–∏–µ
          </label>
          <textarea
            rows={2}
            value={formData.description}
            onChange={(e) => setFormData({...formData, description: e.target.value})}
            className="w-full px-3 py-2 bg-gray-700 border border-gray-600 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-primary resize-none"
            placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..."
          />
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-gray-300 text-sm font-bold mb-2">
              –¶–≤–µ—Ç–∞
            </label>
            <input
              type="text"
              value={formData.colors}
              onChange={(e) => setFormData({...formData, colors: e.target.value})}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
              placeholder="–ë–µ–ª—ã–π, –ß–µ—Ä–Ω—ã–π, –°–µ—Ä—ã–π"
            />
          </div>
          
          <div>
            <label className="block text-gray-300 text-sm font-bold mb-2">
              –†–∞–∑–º–µ—Ä—ã
            </label>
            <input
              type="text"
              value={formData.sizes}
              onChange={(e) => setFormData({...formData, sizes: e.target.value})}
              className="w-full px-3 py-2 bg-gray-700 border border-gray-600 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
              placeholder="XS, S, M, L, XL"
            />
          </div>
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full bg-primary text-black font-bold py-3 px-4 rounded-lg hover:bg-yellow-400 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
        >
          {loading ? (
            <>
              <div className="w-4 h-4 border-2 border-black border-t-transparent rounded-full animate-spin mr-2"></div>
              –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...
            </>
          ) : (
            '‚ö° –ë—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'
          )}
        </button>
      </form>
      
      <p className="text-sm text-gray-400 mt-4">
        üí° –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º-–∑–∞–≥–ª—É—à–∫–æ–π. –í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
      </p>
    </div>
  )
} 