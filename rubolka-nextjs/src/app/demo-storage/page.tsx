'use client'

import { useState, useEffect } from 'react'

export default function DemoStoragePage() {
  const [products, setProducts] = useState([])
  const [newProduct, setNewProduct] = useState('')
  const [loading, setLoading] = useState(false)
  const [storageInfo, setStorageInfo] = useState<any>(null)

  const fetchProducts = async () => {
    try {
      const res = await fetch('/api/products')
      const data = await res.json()
      if (data.success) {
        setProducts(data.products)
        console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', data.products.length)
      }
    } catch (error) {
      console.error('Error fetching products:', error)
    }
  }

  const checkStorage = async () => {
    try {
      const res = await fetch('/api/debug')
      const data = await res.json()
      if (data.success) {
        setStorageInfo(data.storage)
        console.log('üîß –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', data.storage)
      }
    } catch (error) {
      console.error('Error checking storage:', error)
    }
  }

  const addProduct = async () => {
    if (!newProduct.trim()) return
    
    setLoading(true)
    try {
      const res = await fetch('/api/products', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newProduct,
          price: 299,
          category: 'unisex',
          description: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
          colors: ['–±–µ–ª—ã–π'],
          sizes: ['M'],
          material: '–•–ª–æ–ø–æ–∫ 100%'
        }),
      })

      if (res.ok) {
        const data = await res.json()
        if (data.success) {
          console.log('‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω:', data.product)
          await fetchProducts() // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
          await checkStorage() // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          setNewProduct('')
        }
      }
    } catch (error) {
      console.error('Error adding product:', error)
    }
    setLoading(false)
  }

  const deleteProduct = async (id: string) => {
    try {
      const res = await fetch(`/api/products?id=${id}`, {
        method: 'DELETE'
      })

      if (res.ok) {
        const data = await res.json()
        if (data.success) {
          console.log('‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω:', id)
          await fetchProducts() // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
          await checkStorage() // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        }
      }
    } catch (error) {
      console.error('Error deleting product:', error)
    }
  }

  const clearAddedProducts = async () => {
    try {
      const res = await fetch('/api/debug', { method: 'DELETE' })
      const data = await res.json()
      if (data.success) {
        console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞:', data.message)
        alert(data.message)
        await fetchProducts()
        await checkStorage()
      }
    } catch (error) {
      console.error('Error clearing products:', error)
    }
  }

  useEffect(() => {
    fetchProducts()
    checkStorage()
  }, [])

  return (
    <div className="min-h-screen bg-gray-900 text-white p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-8">üß™ –î–µ–º–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞</h1>
        
        <div className="bg-green-900/20 border border-green-500 rounded-lg p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û!</h2>
          <p className="mb-4">
            –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è <strong>—Å–µ—Ä–≤–µ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏</strong> –≤–º–µ—Å—Ç–æ localStorage.
            –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!
          </p>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div>
              <h3 className="font-semibold text-green-400">‚úÖ –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç:</h3>
              <ul className="list-disc list-inside space-y-1">
                <li>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ ‚úÖ</li>
                <li>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ ‚úÖ</li>
                <li>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ‚úÖ</li>
                <li>–î–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—Å–ª–µ F5 ‚úÖ</li>
              </ul>
            </div>
            <div>
              <h3 className="font-semibold text-blue-400">‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h3>
              <ul className="list-disc list-inside space-y-1">
                <li>–î–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞</li>
                <li>–ñ–∏–≤—É—Ç –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</li>
                <li>–û–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
                <li>–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</li>
              </ul>
            </div>
          </div>
        </div>

        {storageInfo && (
          <div className="bg-blue-900/20 border border-blue-500 rounded-lg p-6 mb-8">
            <h2 className="text-xl font-semibold mb-4">üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
              <div>
                <span className="text-blue-400 font-semibold">–¢–æ–≤–∞—Ä–æ–≤:</span> {storageInfo.products}
              </div>
              <div>
                <span className="text-blue-400 font-semibold">–ó–∞–∫–∞–∑–æ–≤:</span> {storageInfo.orders}
              </div>
              <div>
                <span className="text-blue-400 font-semibold">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:</span> {storageInfo.initialized ? '‚úÖ' : '‚ùå'}
              </div>
            </div>
            {storageInfo.productIds && storageInfo.productIds.length > 0 && (
              <div className="mt-4">
                <span className="text-blue-400 font-semibold">ID —Ç–æ–≤–∞—Ä–æ–≤:</span>
                <div className="mt-2 text-xs bg-gray-800 rounded p-2 font-mono">
                  {storageInfo.productIds.join(', ')}
                </div>
              </div>
            )}
          </div>
        )}

        <div className="bg-gray-800 rounded-lg p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</h2>
          <div className="flex gap-4">
            <input
              type="text"
              value={newProduct}
              onChange={(e) => setNewProduct(e.target.value)}
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..."
              className="flex-1 px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400"
              onKeyPress={(e) => e.key === 'Enter' && addProduct()}
            />
            <button
              onClick={addProduct}
              disabled={loading || !newProduct.trim()}
              className="px-6 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 rounded-lg font-medium transition-colors"
            >
              {loading ? '–î–æ–±–∞–≤–ª—è—é...' : '–î–æ–±–∞–≤–∏—Ç—å'}
            </button>
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">üì¶ –¢–æ–≤–∞—Ä—ã ({products.length})</h2>
          
          {products.length === 0 ? (
            <p className="text-gray-400 text-center py-8">–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
          ) : (
            <div className="space-y-3">
              {products.map((product: any) => (
                <div key={product.id} className="flex items-center justify-between bg-gray-700 rounded-lg p-4">
                  <div>
                    <h3 className="font-semibold">{product.name}</h3>
                    <p className="text-sm text-gray-400">
                      {product.price}‚ÇΩ ‚Ä¢ {product.category} ‚Ä¢ {product.material}
                    </p>
                    <p className="text-xs text-gray-500 mt-1">
                      ID: {product.id}
                    </p>
                  </div>
                  <button
                    onClick={() => deleteProduct(product.id)}
                    className="px-4 py-2 bg-red-600 hover:bg-red-700 rounded-lg text-sm transition-colors"
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>

        <div className="flex justify-center gap-4 mb-8">
          <button
            onClick={() => window.location.reload()}
            className="px-6 py-2 bg-purple-600 hover:bg-purple-700 rounded-lg font-medium transition-colors"
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </button>
          <button
            onClick={checkStorage}
            className="px-6 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg font-medium transition-colors"
          >
            üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          </button>
          <button
            onClick={clearAddedProducts}
            className="px-6 py-2 bg-red-600 hover:bg-red-700 rounded-lg font-medium transition-colors"
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ
          </button>
        </div>

        <div className="bg-gray-800 rounded-lg p-6">
          <h3 className="text-lg font-semibold mb-4">üîß –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞</h3>
          <p className="text-gray-300 mb-4">
            –ß—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å –≤ —Ä–µ–∞–ª—å–Ω—É—é –±–∞–∑—É, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
          </p>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div className="bg-green-900/20 border border-green-600 rounded-lg p-4">
              <h4 className="font-semibold text-green-400 mb-2">PlanetScale (MySQL)</h4>
              <p className="text-gray-300">–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è. Serverless MySQL —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–ª–∞–Ω–æ–º.</p>
            </div>
            <div className="bg-blue-900/20 border border-blue-600 rounded-lg p-4">
              <h4 className="font-semibold text-blue-400 mb-2">Railway PostgreSQL</h4>
              <p className="text-gray-300">–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.</p>
            </div>
            <div className="bg-purple-900/20 border border-purple-600 rounded-lg p-4">
              <h4 className="font-semibold text-purple-400 mb-2">Supabase</h4>
              <p className="text-gray-300">PostgreSQL —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 