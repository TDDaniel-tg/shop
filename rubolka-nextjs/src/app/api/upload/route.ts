import { NextRequest, NextResponse } from 'next/server'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function compressImage(file: File, maxWidth: number = 800, quality: number = 0.8): Promise<string> {
  return new Promise((resolve, reject) => {
    const canvas = document.createElement('canvas')
    const ctx = canvas.getContext('2d')
    const img = new Image()
    
    img.onload = () => {
      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
      let { width, height } = img
      if (width > maxWidth) {
        height = (height * maxWidth) / width
        width = maxWidth
      }
      
      canvas.width = width
      canvas.height = height
      
      // –†–∏—Å—É–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      ctx?.drawImage(img, 0, 0, width, height)
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 —Å —Å–∂–∞—Ç–∏–µ–º
      const compressedDataUrl = canvas.toDataURL('image/jpeg', quality)
      resolve(compressedDataUrl)
    }
    
    img.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'))
    img.src = URL.createObjectURL(file)
  })
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–±–µ–∑ canvas)
async function serverCompressImage(file: File): Promise<string> {
  // –î–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
  // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å sharp –∏–ª–∏ –¥—Ä—É–≥—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Å–∂–∞—Ç–∏—è
  const bytes = await file.arrayBuffer()
  const buffer = Buffer.from(bytes)
  const base64 = buffer.toString('base64')
  const mimeType = file.type
  return `data:${mimeType};base64,${base64}`
}

export async function POST(request: NextRequest) {
  try {
    console.log('üéØ === UPLOAD API START ===')
    console.log('üì§ Upload request received')
    console.log('üìç Request URL:', request.url)
    console.log('üìç Request method:', request.method)
    console.log('üìç Headers:', Object.fromEntries(request.headers.entries()))
    
    let formData
    try {
      formData = await request.formData()
      console.log('üìù FormData received successfully')
      console.log('üìù FormData keys:', Array.from(formData.keys()))
    } catch (formError) {
      console.error('‚ùå Error parsing FormData:', formError)
      return NextResponse.json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ FormData: ' + (formError instanceof Error ? formError.message : 'Unknown error')
      }, { status: 400 })
    }
    
    const file = formData.get('file') as File

    if (!file) {
      console.log('‚ùå No file provided in formData')
      console.log('üìù FormData entries:', Array.from(formData.entries()))
      return NextResponse.json({
        success: false,
        error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ'
      }, { status: 400 })
    }

    console.log('üìÅ File details:', {
      name: file.name,
      type: file.type,
      size: file.size,
      lastModified: file.lastModified
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      console.log('‚ùå Invalid file type:', file.type)
      return NextResponse.json({
        success: false,
        error: `–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ª—É—á–µ–Ω —Ç–∏–ø: ${file.type}`
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
    if (file.size > 10 * 1024 * 1024) {
      console.log('‚ùå File too large:', file.size)
      return NextResponse.json({
        success: false,
        error: `–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB. –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(file.size / 1024 / 1024 * 100) / 100}MB`
      }, { status: 400 })
    }

    console.log('‚úÖ File validation passed')

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ —Å–∂–∞—Ç–∏–µ (–±–µ–∑ canvas —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    let dataUrl
    try {
      console.log('üîÑ Converting to base64...')
      dataUrl = await serverCompressImage(file)
      console.log('‚úÖ Base64 conversion completed')
      console.log('üìä DataURL length:', dataUrl.length)
      console.log('üìä Original size:', file.size)
      console.log('üìä Base64 ratio:', Math.round((dataUrl.length / file.size) * 100) + '%')
    } catch (compressionError) {
      console.error('‚ùå Error converting to base64:', compressionError)
      return NextResponse.json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ' + (compressionError instanceof Error ? compressionError.message : 'Unknown error')
      }, { status: 500 })
    }

    // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è base64 (8MB)
    if (dataUrl.length > 8 * 1024 * 1024) {
      console.log('‚ö†Ô∏è Image still too large:', dataUrl.length)
      return NextResponse.json({
        success: false,
        error: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: ${Math.round(dataUrl.length / 1024 / 1024 * 100) / 100}MB`
      }, { status: 400 })
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º data URL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîó Returning data URL for database storage')
    console.log('‚úÖ === UPLOAD API SUCCESS ===')

    return NextResponse.json({
      success: true,
      filePath: dataUrl, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º data URL –≤–º–µ—Å—Ç–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
      fileName: file.name,
      fileSize: dataUrl.length,
      mimeType: file.type,
      debug: {
        originalSize: file.size,
        base64Size: dataUrl.length,
        compressionRatio: Math.round((dataUrl.length / file.size) * 100) + '%'
      }
    })

  } catch (error) {
    console.error('‚ùå === UPLOAD API ERROR ===')
    console.error('‚ùå Upload error:', error)
    console.error('‚ùå Error stack:', (error as Error).stack)
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ' + (error instanceof Error ? error.message : 'Unknown error')
    }, { status: 500 })
  }
} 