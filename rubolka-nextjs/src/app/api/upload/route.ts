import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    console.log('üì§ Upload request received')
    console.log('üìç Request URL:', request.url)
    console.log('üìç Request method:', request.method)
    
    const formData = await request.formData()
    console.log('üìù FormData keys:', Array.from(formData.keys()))
    
    const file = formData.get('file') as File

    if (!file) {
      console.log('‚ùå No file provided in formData')
      console.log('üìù FormData entries:', Array.from(formData.entries()))
      return NextResponse.json({
        success: false,
        error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 400 })
    }

    console.log('üìÅ File details:', {
      name: file.name,
      type: file.type,
      size: file.size,
      lastModified: file.lastModified
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      console.log('‚ùå Invalid file type:', file.type)
      return NextResponse.json({
        success: false,
        error: '–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if (file.size > 5 * 1024 * 1024) {
      console.log('‚ùå File too large:', file.size)
      return NextResponse.json({
        success: false,
        error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB'
      }, { status: 400 })
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64 –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    const bytes = await file.arrayBuffer()
    const buffer = Buffer.from(bytes)
    console.log('‚úÖ File buffer created, size:', buffer.length)

    // –°–æ–∑–¥–∞–µ–º base64 —Å—Ç—Ä–æ–∫—É —Å mime-type
    const base64 = buffer.toString('base64')
    const mimeType = file.type
    const dataUrl = `data:${mimeType};base64,${base64}`
    
    console.log('‚úÖ Base64 conversion completed')
    console.log('üìä Base64 length:', base64.length)
    console.log('üìä DataURL length:', dataUrl.length)

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º data URL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üîó Returning data URL for database storage')
    console.log('‚úÖ Upload completed successfully')

    return NextResponse.json({
      success: true,
      filePath: dataUrl, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º data URL –≤–º–µ—Å—Ç–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
      fileName: file.name,
      fileSize: buffer.length,
      mimeType: mimeType
    })

  } catch (error) {
    console.error('‚ùå Upload error:', error)
    console.error('‚ùå Error stack:', (error as Error).stack)
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ' + (error instanceof Error ? error.message : 'Unknown error')
    }, { status: 500 })
  }
} 