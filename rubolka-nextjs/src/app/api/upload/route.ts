import { NextRequest, NextResponse } from 'next/server'
import { writeFile, mkdir } from 'fs/promises'
import path from 'path'

export async function POST(request: NextRequest) {
  try {
    console.log('üì§ Upload request received')
    console.log('üìç Request URL:', request.url)
    console.log('üìç Request method:', request.method)
    
    const formData = await request.formData()
    console.log('üìù FormData keys:', Array.from(formData.keys()))
    
    const file = formData.get('file') as File

    if (!file) {
      console.log('‚ùå No file provided in formData')
      console.log('üìù FormData entries:', Array.from(formData.entries()))
      return NextResponse.json({
        success: false,
        error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 400 })
    }

    console.log('üìÅ File details:', {
      name: file.name,
      type: file.type,
      size: file.size,
      lastModified: file.lastModified
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!file.type.startsWith('image/')) {
      console.log('‚ùå Invalid file type:', file.type)
      return NextResponse.json({
        success: false,
        error: '–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if (file.size > 5 * 1024 * 1024) {
      console.log('‚ùå File too large:', file.size)
      return NextResponse.json({
        success: false,
        error: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB'
      }, { status: 400 })
    }

    const bytes = await file.arrayBuffer()
    const buffer = Buffer.from(bytes)
    console.log('‚úÖ File buffer created, size:', buffer.length)

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const fileExtension = path.extname(file.name)
    const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}${fileExtension}`
    console.log('üìù Generated filename:', fileName)
    
    // –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤ public –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤)
    const uploadDir = path.join(process.cwd(), 'public', 'uploads', 'products')
    const filePath = path.join(uploadDir, fileName)
    console.log('üìÇ Current working directory:', process.cwd())
    console.log('üìÇ Upload directory:', uploadDir)
    console.log('üìÇ Full file path:', filePath)

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    try {
      await mkdir(uploadDir, { recursive: true })
      console.log('‚úÖ Directory created/verified:', uploadDir)
    } catch (dirError) {
      console.log('‚ö†Ô∏è Directory creation error (might already exist):', dirError)
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    try {
      await writeFile(filePath, buffer)
      console.log('‚úÖ File written successfully to:', filePath)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
      const fs = require('fs')
      if (fs.existsSync(filePath)) {
        const stats = fs.statSync(filePath)
        console.log('‚úÖ File exists after save, size:', stats.size)
      } else {
        console.log('‚ùå File does not exist after save!')
        throw new Error('File was not saved properly')
      }
    } catch (saveError) {
      console.error('‚ùå File save error:', saveError)
      throw saveError
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    const publicPath = `/uploads/products/${fileName}`
    console.log('üîó Public path:', publicPath)
    console.log('‚úÖ Upload completed successfully')

    return NextResponse.json({
      success: true,
      filePath: publicPath,
      fileName: fileName,
      fileSize: buffer.length
    })

  } catch (error) {
    console.error('‚ùå Upload error:', error)
    console.error('‚ùå Error stack:', (error as Error).stack)
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ' + (error instanceof Error ? error.message : 'Unknown error')
    }, { status: 500 })
  }
} 