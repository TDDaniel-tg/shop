import { NextRequest, NextResponse } from 'next/server'

// AmoCRM API Configuration
const AMOCRM_SUBDOMAIN = process.env.AMOCRM_SUBDOMAIN || 'your-subdomain'
const AMOCRM_ACCESS_TOKEN = process.env.AMOCRM_ACCESS_TOKEN || ''
const AMOCRM_API_URL = `https://${AMOCRM_SUBDOMAIN}.amocrm.ru/api/v4`

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–∞ –≤ AmoCRM
async function sendToAmoCRM(data: { name: string; phone: string; message?: string }) {
  console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AmoCRM:')
  console.log('   SUBDOMAIN:', AMOCRM_SUBDOMAIN)
  console.log('   TOKEN:', AMOCRM_ACCESS_TOKEN ? `${AMOCRM_ACCESS_TOKEN.substring(0, 10)}...` : '–ù–ï –£–ö–ê–ó–ê–ù')
  console.log('   API_URL:', AMOCRM_API_URL)
  
  if (!AMOCRM_ACCESS_TOKEN || AMOCRM_ACCESS_TOKEN === '' || AMOCRM_ACCESS_TOKEN === 'your-access-token') {
    console.log('üîÑ AmoCRM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ')
    return { success: true, localSave: true }
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ª–∏–¥ –≤ AmoCRM
    const leadData = {
      name: `${data.name} - ${data.phone}`,
      price: 0
    }

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥ –≤ AmoCRM:', JSON.stringify([leadData], null, 2))
    
    const response = await fetch(`${AMOCRM_API_URL}/leads`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${AMOCRM_ACCESS_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify([leadData])
    })

    console.log('üì• –û—Ç–≤–µ—Ç AmoCRM - —Å—Ç–∞—Ç—É—Å:', response.status, response.statusText)
    
    const result = await response.json()
    console.log('üì• –û—Ç–≤–µ—Ç AmoCRM - –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(result, null, 2))

    if (response.ok) {
      console.log('‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ AmoCRM:', result)
      
      const leadId = result._embedded?.leads?.[0]?.id
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –ª–∏–¥—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      if (leadId && data.message) {
        try {
          const noteData = {
            note_type: 'common',
            params: {
              text: `–°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}\n–ò—Å—Ç–æ—á–Ω–∏–∫: –°–∞–π—Ç RUBOLKA`
            }
          }
          
          await fetch(`${AMOCRM_API_URL}/leads/${leadId}/notes`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${AMOCRM_ACCESS_TOKEN}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify([noteData])
          })
          
          console.log('üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –ª–∏–¥—É')
        } catch (noteError) {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:', noteError)
        }
      }
      
      return { success: true, amocrm: true, leadId }
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ AmoCRM API:', result)
      return { success: false, error: result.detail || result.message || '–û—à–∏–±–∫–∞ AmoCRM' }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AmoCRM:', error)
    return { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AmoCRM' }
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { name, phone, message } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (email –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    if (!name || !phone) {
      return NextResponse.json({
        success: false,
        error: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω'
      }, { status: 400 })
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
    console.log('üìû –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:', {
      name,
      phone,
      message,
      timestamp: new Date().toISOString(),
      source: 'website'
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AmoCRM
    const amocrmResult = await sendToAmoCRM({ name, phone, message })

    if (amocrmResult.success) {
      if (amocrmResult.localSave) {
        return NextResponse.json({
          success: true,
          message: '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
          debug: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ (AmoCRM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)'
        })
      } else {
        return NextResponse.json({
          success: true,
          message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.',
          leadId: amocrmResult.leadId
        })
      }
    } else {
      // –ï—Å–ª–∏ AmoCRM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞—è–≤–∫—É
      console.error('AmoCRM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ')
      return NextResponse.json({
        success: true,
        message: '–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
        warning: '–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã'
      })
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error)
    return NextResponse.json({
      success: false,
      error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.'
    }, { status: 500 })
  }
} 