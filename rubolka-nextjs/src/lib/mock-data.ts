// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

const initialProducts = [
  {
    id: '1',
    name: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —É–Ω–∏—Å–µ–∫—Å",
    price: 450,
    category: "unisex",
    description: "–£–¥–æ–±–Ω–∞—è –±–∞–∑–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –∏–∑ 100% —Ö–ª–æ–ø–∫–∞. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Å–∫–∏.",
    image: "/assets/catalog/placeholder.svg",
    colors: ["–±–µ–ª—ã–π", "—á–µ—Ä–Ω—ã–π", "—Å–µ—Ä—ã–π", "—Å–∏–Ω–∏–π"],
    sizes: ["XS", "S", "M", "L", "XL"],
    material: "–•–ª–æ–ø–æ–∫ 100%",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: '2',
    name: "–ñ–µ–Ω—Å–∫–∞—è –ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞",
    price: 390,
    category: "women",
    description: "–°—Ç–∏–ª—å–Ω–∞—è –ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∂–µ–Ω—â–∏–Ω. –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç —Ñ–∏–≥—É—Ä—É.",
    image: "/assets/catalog/placeholder.svg",
    colors: ["—Ä–æ–∑–æ–≤—ã–π", "–±–µ–ª—ã–π", "–ª–∞–≤–∞–Ω–¥–æ–≤—ã–π", "–º—è—Ç–Ω—ã–π"],
    sizes: ["XS", "S", "M", "L", "XL"],
    material: "–•–ª–æ–ø–æ–∫ 95%, —ç–ª–∞—Å—Ç–∞–Ω 5%",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  },
  {
    id: '3',
    name: "–ú—É–∂—Å–∫–∞—è oversize —Ñ—É—Ç–±–æ–ª–∫–∞",
    price: 520,
    category: "men",
    description: "–°–≤–æ–±–æ–¥–Ω–∞—è –º—É–∂—Å–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ –≤ —Å—Ç–∏–ª–µ oversize. –ú–æ–¥–Ω—ã–π –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –∫—Ä–æ–π.",
    image: "/assets/catalog/placeholder.svg",
    colors: ["—á–µ—Ä–Ω—ã–π", "–±–µ–ª—ã–π", "—Ö–∞–∫–∏", "—Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π"],
    sizes: ["S", "M", "L", "XL", "XXL"],
    material: "–•–ª–æ–ø–æ–∫ 100%",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  }
]

const initialOrders = [
  {
    id: '1',
    customerName: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
    email: "ivan@example.com",
    phone: "+7 900 123-45-67",
    totalAmount: 1360,
    status: "pending",
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    items: [
      {
        id: '1',
        productId: '1',
        productName: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —É–Ω–∏—Å–µ–∫—Å",
        quantity: 2,
        size: "L",
        color: "—á–µ—Ä–Ω—ã–π",
        price: 450
      },
      {
        id: '2',
        productId: '2',
        productName: "–ñ–µ–Ω—Å–∫–∞—è –ø—Ä–∏—Ç–∞–ª–µ–Ω–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞",
        quantity: 1,
        size: "M",
        color: "—Ä–æ–∑–æ–≤—ã–π", 
        price: 390
      }
    ]
  }
]

// üöÄ –°–ï–†–í–ï–†–ù–û–ï —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏)
class ServerStorage {
  private static products: any[] = [...initialProducts]
  private static orders: any[] = [...initialOrders]
  private static initialized = false

  private static init() {
    if (!this.initialized) {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞')
      this.products = [...initialProducts]
      this.orders = [...initialOrders]
      this.initialized = true
    }
  }

  static getAllProducts() {
    this.init()
    return [...this.products] // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é
  }

  static createProduct(productData: any) {
    this.init()
    const newProduct = {
      id: `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      ...productData,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }
    
    this.products.push(newProduct)
    console.log(`‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞–º—è—Ç—å: "${newProduct.name}" (ID: ${newProduct.id})`)
    console.log(`üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏: ${this.products.length}`)
    return newProduct
  }

  static updateProduct(id: string, updateData: any) {
    this.init()
    const index = this.products.findIndex((p: any) => p.id === id)
    
    if (index !== -1) {
      this.products[index] = {
        ...this.products[index],
        ...updateData,
        updatedAt: new Date().toISOString()
      }
      console.log(`‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: "${this.products[index].name}" (ID: ${id})`)
      return this.products[index]
    }
    
    console.log(`‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${id}`)
    return null
  }

  static deleteProduct(id: string) {
    this.init()
    const initialLength = this.products.length
    this.products = this.products.filter((p: any) => p.id !== id)
    
    if (this.products.length !== initialLength) {
      console.log(`‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω: ${id}`)
      console.log(`üì¶ –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø–∞–º—è—Ç–∏: ${this.products.length}`)
      return true
    }
    
    console.log(`‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${id}`)
    return false
  }

  static getAllOrders() {
    this.init()
    return [...this.orders] // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é
  }

  static createOrder(orderData: any) {
    this.init()
    const newOrder = {
      id: `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      ...orderData,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }
    
    this.orders.push(newOrder)
    console.log(`‚úÖ –ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω: ${newOrder.customerName} (ID: ${newOrder.id})`)
    return newOrder
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  static getStorageInfo() {
    this.init()
    return {
      products: this.products.length,
      orders: this.orders.length,
      initialized: this.initialized,
      productIds: this.products.map((p: any) => p.id)
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const mockProducts = ServerStorage.getAllProducts()
export const mockOrders = ServerStorage.getAllOrders()

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π API
export { ServerStorage as MockStorage }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export const isDatabaseAvailable = () => {
  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ DATABASE_URL –µ—Å—Ç—å –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–æ–π
  const dbUrl = process.env.DATABASE_URL
  
  if (!dbUrl) {
    console.log('üîÑ DATABASE_URL not found, using mock data')
    return false
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –ª–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
  if (dbUrl.includes('localhost') || dbUrl.includes('password@localhost')) {
    console.log('üîÑ Local development detected, using mock data')
    return false
  }
  
  // –ï—Å–ª–∏ URL –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π (—Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–º–µ–Ω)
  if (dbUrl.includes('planetscale.app') || dbUrl.includes('railway') || dbUrl.includes('mysql://') && !dbUrl.includes('localhost')) {
    console.log('‚úÖ Real database detected, using Prisma')
    return true
  }
  
  console.log('üîÑ Database URL not recognized, using mock data')
  return false
} 